@page "/adminEdit"
@using praktos1semestr2blazor.Model
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3 class="text-center mb-4">Управление пользователями</h3>
<h4 class="mb-3">Список пользователей</h4>
<table class="table table-striped table-bordered">
    <thead class="table-light">
        <tr>
            <th>Имя</th>
            <th>Почта</th>
            <th>Описание</th>
            <th>Роль</th>
            <th>Действия</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in users)
        {
            <tr>
                <td>@user.Name</td>
                <td>@user.Email</td>
                <td>@user.Description</td>
                <td>@user.Role</td>
                <td>
                    <button @onclick="() => EditUser(user)" class="btn btn-warning btn-sm">Редактировать</button>
                    <button @onclick="() => DeleteUser(user.id_User)" class="btn btn-danger btn-sm">Удалить</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<h4 class="mt-4">@((isEditing ? "Редактировать пользователя" : "Добавить нового пользователя"))</h4>
<EditForm Model="newUser" OnValidSubmit="@(() => isEditing ? HandleUpdateUser() : HandleCreateUser())">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <InputText @bind-Value="newUser.Name" placeholder="Имя" class="form-control" />
    </div>
    <div class="mb-3">
        <InputText @bind-Value="newUser.Email" placeholder="Email" class="form-control" />
    </div>
    <div class="mb-3">
        <InputText @bind-Value="newUser.Password" type="password" placeholder="Пароль" class="form-control" />
    </div>
    <div class="mb-3">
        <InputText @bind-Value="newUser.Description" placeholder="Описание" class="form-control" />
    </div>
    <div class="mb-3">
        <InputText @bind-Value="newUser.Role" placeholder="Роль" class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary">@((isEditing) ? "Сохранить" : "Добавить пользователя")</button>
    @if (isEditing)
    {
        <button type="button" class="btn btn-secondary ms-2" @onclick="ResetForm">Отмена</button>
    }
</EditForm>

@code {
    private bool isEditing = false;
    private RegisterModel newUser = new RegisterModel();
    private List<RegisterModel> users = new List<RegisterModel>();

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            var response = await Http.GetAsync("https://localhost:7029/api/User");
            if (response.IsSuccessStatusCode)
            {
                users = await response.Content.ReadFromJsonAsync<List<RegisterModel>>() ?? new List<RegisterModel>();
            }
            else
            {
                ShowAlert("Ошибка загрузки пользователей. Сервер вернул ошибку.");
            }
        }
        catch (Exception ex)
        {
            ShowAlert($"Ошибка загрузки пользователей: {ex.Message}");
        }
    }

    private async Task HandleUpdateUser()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"https://localhost:7029/api/User/{newUser.id_User}", newUser);
            if (response.IsSuccessStatusCode)
            {
                await LoadUsers();
                ResetForm();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                ShowAlert($"Ошибка обновления пользователя: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            ShowAlert($"Ошибка обновления: {ex.Message}");
        }
    }

    private async Task HandleCreateUser()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7029/api/User", newUser);
            if (response.IsSuccessStatusCode)
            {
                await LoadUsers();
                ResetForm();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                ShowAlert($"Ошибка добавления пользователя: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            ShowAlert($"Ошибка добавления: {ex.Message}");
        }
    }

    private void EditUser(RegisterModel user)
    {
        newUser = new RegisterModel
            {
                id_User = user.id_User,
                Name = user.Name,
                Email = user.Email,
                Password = user.Password,
                Description = user.Description,
                Role = user.Role
            };
        isEditing = true;
    }

    private async Task DeleteUser(int id)
    {
        try
        {
            var userIdString = await JS.InvokeAsync<string>("localStorage.getItem", "currentUserId");
            if (int.TryParse(userIdString, out var currentUserId) && id == currentUserId)
            {
                ShowAlert("Вы не можете удалить свой собственный аккаунт.");
                return;
            }

            var response = await Http.DeleteAsync($"https://localhost:7029/api/User/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadUsers();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                ShowAlert($"Ошибка удаления пользователя: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            ShowAlert($"Ошибка удаления пользователя: {ex.Message}");
        }
    }

    private void ResetForm()
    {
        newUser = new RegisterModel();
        isEditing = false;
    }

    private void ShowAlert(string message)
    {
        JS.InvokeVoidAsync("alert", message);
    }
}